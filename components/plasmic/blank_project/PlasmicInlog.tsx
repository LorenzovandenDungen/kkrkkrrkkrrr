// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4UWuoUxBjJSz5QMN4ogHwp
// Component: YyBaOWAnjs
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Component from "../../Component"; // plasmic-import: YhnFTIPHVr/component
import C from "../../C"; // plasmic-import: J3ekppzqTn/component
import Cc from "../../Cc"; // plasmic-import: 9PguJREveg/component
import Ccc from "../../Ccc"; // plasmic-import: L6oeE8-ab_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 4UWuoUxBjJSz5QMN4ogHwp/projectcss
import sty from "./PlasmicInlog.module.css"; // plasmic-import: YyBaOWAnjs/css

export type PlasmicInlog__VariantMembers = {};
export type PlasmicInlog__VariantsArgs = {};
type VariantPropType = keyof PlasmicInlog__VariantsArgs;
export const PlasmicInlog__VariantProps = new Array<VariantPropType>();

export type PlasmicInlog__ArgsType = {};
type ArgPropType = keyof PlasmicInlog__ArgsType;
export const PlasmicInlog__ArgProps = new Array<ArgPropType>();

export type PlasmicInlog__OverridesType = {
  tv1?: p.Flex<"div">;
  component?: p.Flex<typeof Component>;
  c?: p.Flex<typeof C>;
  cc?: p.Flex<typeof Cc>;
  ccc?: p.Flex<typeof Ccc>;
};

export interface DefaultInlogProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicInlog__RenderFunc(props: {
  variants: PlasmicInlog__VariantsArgs;
  args: PlasmicInlog__ArgsType;
  overrides: PlasmicInlog__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"tv1"}
      data-plasmic-override={overrides.tv1}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.tv1
      )}
    >
      <Component
        data-plasmic-name={"component"}
        data-plasmic-override={overrides.component}
        className={classNames("__wab_instance", sty.component)}
      />

      <C
        data-plasmic-name={"c"}
        data-plasmic-override={overrides.c}
        className={classNames("__wab_instance", sty.c)}
      />

      <Cc
        data-plasmic-name={"cc"}
        data-plasmic-override={overrides.cc}
        className={classNames("__wab_instance", sty.cc)}
      />

      <Ccc
        data-plasmic-name={"ccc"}
        data-plasmic-override={overrides.ccc}
        className={classNames("__wab_instance", sty.ccc)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tv1: ["tv1", "component", "c", "cc", "ccc"],
  component: ["component"],
  c: ["c"],
  cc: ["cc"],
  ccc: ["ccc"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  tv1: "div";
  component: typeof Component;
  c: typeof C;
  cc: typeof Cc;
  ccc: typeof Ccc;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInlog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInlog__VariantsArgs;
    args?: PlasmicInlog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInlog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInlog__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInlog__ArgProps,
          internalVariantPropNames: PlasmicInlog__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicInlog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "tv1") {
    func.displayName = "PlasmicInlog";
  } else {
    func.displayName = `PlasmicInlog.${nodeName}`;
  }
  return func;
}

export const PlasmicInlog = Object.assign(
  // Top-level PlasmicInlog renders the root element
  makeNodeComponent("tv1"),
  {
    // Helper components rendering sub-elements
    component: makeNodeComponent("component"),
    c: makeNodeComponent("c"),
    cc: makeNodeComponent("cc"),
    ccc: makeNodeComponent("ccc"),

    // Metadata about props expected for PlasmicInlog
    internalVariantProps: PlasmicInlog__VariantProps,
    internalArgProps: PlasmicInlog__ArgProps
  }
);

export default PlasmicInlog;
/* prettier-ignore-end */
