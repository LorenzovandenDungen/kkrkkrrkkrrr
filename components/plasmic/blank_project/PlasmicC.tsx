// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4UWuoUxBjJSz5QMN4ogHwp
// Component: J3ekppzqTn
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 4UWuoUxBjJSz5QMN4ogHwp/projectcss
import sty from "./PlasmicC.module.css"; // plasmic-import: J3ekppzqTn/css

export type PlasmicC__VariantMembers = {};
export type PlasmicC__VariantsArgs = {};
type VariantPropType = keyof PlasmicC__VariantsArgs;
export const PlasmicC__VariantProps = new Array<VariantPropType>();

export type PlasmicC__ArgsType = {};
type ArgPropType = keyof PlasmicC__ArgsType;
export const PlasmicC__ArgProps = new Array<ArgPropType>();

export type PlasmicC__OverridesType = {
  frame5?: p.Flex<"div">;
  text?: p.Flex<"div">;
  rectangle1?: p.Flex<"textarea">;
};

export interface DefaultCProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicC__RenderFunc(props: {
  variants: PlasmicC__VariantsArgs;
  args: PlasmicC__ArgsType;
  overrides: PlasmicC__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"frame5"}
      data-plasmic-override={overrides.frame5}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.frame5
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Username"}
      </div>

      <textarea
        data-plasmic-name={"rectangle1"}
        data-plasmic-override={overrides.rectangle1}
        className={classNames(
          projectcss.all,
          projectcss.textarea,
          sty.rectangle1
        )}
        ref={ref => {
          $refs["rectangle1"] = ref;
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame5: ["frame5", "text", "rectangle1"],
  text: ["text"],
  rectangle1: ["rectangle1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame5: "div";
  text: "div";
  rectangle1: "textarea";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicC__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicC__VariantsArgs;
    args?: PlasmicC__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicC__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicC__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicC__ArgProps,
          internalVariantPropNames: PlasmicC__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicC__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame5") {
    func.displayName = "PlasmicC";
  } else {
    func.displayName = `PlasmicC.${nodeName}`;
  }
  return func;
}

export const PlasmicC = Object.assign(
  // Top-level PlasmicC renders the root element
  makeNodeComponent("frame5"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    rectangle1: makeNodeComponent("rectangle1"),

    // Metadata about props expected for PlasmicC
    internalVariantProps: PlasmicC__VariantProps,
    internalArgProps: PlasmicC__ArgProps
  }
);

export default PlasmicC;
/* prettier-ignore-end */
